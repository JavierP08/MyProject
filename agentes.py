# -*- coding: utf-8 -*-
"""TC2008B Entrega Primera Etapa

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14r7BZ7BPHNtQEEijuONSGykV5HYabGUE

## Entrega Primera Etapa Reto

## Preparación
*   pip install --upgrade mesa
*   pip install matplotlib
"""

import mesa
from mesa.time import RandomActivation
import json
import os
import math

import random

"""## Modelos Agentes"""

class PersonAgent(mesa.Agent):

    def __init__(self, unique_id, model, x, y, direction = None, goal = None):
        # Pasa los parámetros a la clase padre
        super().__init__(unique_id, model)

        self.beliefs = {
            'obeyingAmpel' : None,
            'ampelColor' : None,
            'action' : 'walking',
            'speed' : 1,
            'goal' : (0, 0)
        }

        self.pos = x, y

        # define dirección
        if direction is None:
          if self.pos[0] < 60:
              if self.pos[0] < 35:
                  self.direction = 1, 0  # Este
              else:
                  if self.pos[1] < 60:
                    self.direction = 0, 1  # Norte
                  else:
                    self.direction = 0, -1  # Sur
          else:
              if self.pos[0] > 85:
                  self.direction = -1, 0  # Oeste
              else:
                  if self.pos[1] < 60:
                    self.direction = 0, 1  # Norte
                  else:
                    self.direction = 0, -1  # Sur
        else:
          self.direction = direction

        # define objetivo
        if goal is None:
          if self.direction == (0, 1) or self.direction == (0, -1):
              self.beliefs['goal'] = self.pos[0], self.model.grid.height - self.pos[1]
          else:
              self.beliefs['goal'] = self.model.grid.width - self.pos[0], self.pos[1]
        else:
          self.beliefs['goal'] = goal

        # define semáforo
        agents = self.model.schedule.agents
        for agent in agents:
          if agent.unique_id == 0 and self.direction == (0, 1): # Norte
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
          if agent.unique_id == 1 and self.direction == (0, -1): # Sur
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
          if agent.unique_id == 2 and self.direction == (1, 0): # Este
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
          if agent.unique_id == 3 and self.direction == (-1, 0): # Oeste
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state

    def updateAction(self):
        if (self.direction == (0, 1) and self.pos[1] < 45) or (self.direction == (0, -1) and self.pos[1] > 75) or (self.direction == (1, 0) and self.pos[0] < 45) or (self.direction == (-1, 0) and self.pos[0] > 75):
          # Si está en rango para obedecer
          # cambia estado acorde al semáforo
          if self.beliefs['ampelColor'] == 'Green':
            self.beliefs['action'] = 'walking'
          else:
            self.beliefs['action'] = 'waiting'

    def move(self):
        if self.beliefs['action'] == 'walking':
          if self.beliefs['goal'][0] - self.pos[0] == 0:
              newPos = self.pos[0] , self.pos[1] + (self.beliefs['speed'] * self.direction[1])
          elif self.beliefs['goal'][1] - self.pos[1] == 0:
              newPos = self.pos[0] + (self.beliefs['speed'] * self.direction[0]), self.pos[1]

          if self.model.grid.out_of_bounds(newPos):
              self.model.grid.remove_agent(self)
              self.model.schedule.remove(self)
              #print("Llegó al objetivo, destruyendo")
          else:
              self.model.grid.move_agent(self, newPos)
              #print(f"PeatonID: {str(self.unique_id)} Estado: {str(self.beliefs['action'])} Pos: {str(self.pos)}")
        #else:
          #print(f"PeatonID: {str(self.unique_id)} Estado: {str(self.beliefs['action'])} Pos: {str(self.pos)}")

    def walk(self):
        # Evalúa posición
        ## Si posición lo amerita, evaluar semáforo
        if (self.pos[0] > 35 and self.pos[0] < 85) and (self.pos[1] > 35 and self.pos[1] < 85):
          # Actualiza semáforo
          agents = self.model.schedule.agents
          for agent in agents:
            if agent.unique_id == 0 and self.direction == (0, 1): # Norte
              self.beliefs['obeyingAmpel'] = agent
              self.beliefs['ampelColor'] = agent.state
              break
            if agent.unique_id == 1 and self.direction == (0, -1): # Sur
              self.beliefs['obeyingAmpel'] = agent
              self.beliefs['ampelColor'] = agent.state
              break
            if agent.unique_id == 2 and self.direction == (1, 0): # Este
              self.beliefs['obeyingAmpel'] = agent
              self.beliefs['ampelColor'] = agent.state
              break
            if agent.unique_id == 3 and self.direction == (-1, 0): # Oeste
              self.beliefs['obeyingAmpel'] = agent
              self.beliefs['ampelColor'] = agent.state
              break
          self.updateAction()
        self.move()

    def step(self):
        self.walk()

class CarAgent(mesa.Agent):

    def __init__(self, unique_id, model, x, y, direction = None, goal = None):
        # Pasa los parámetros a la clase padre
        super().__init__(unique_id, model)

        self.beliefs = {
            'obeyingAmpel' : None,
            'ampelColor' : None,
            'action' : 'waiting',
            'speed' : random.randint(2, 5),
            'goal' : (0, 0)
        }

        self.pos = x, y

        # define dirección
        if direction is None:
          if self.pos[0] < 60:
              if self.pos[1] < 60:
                  self.direction = 1, 0  # Este
              else:
                  self.direction = 0, -1  # Sur
          else:
              if self.pos[1] > 60:
                  self.direction = -1, 0  # Oeste
              else:
                  self.direction = 0, 1  # Norte
        else:
          self.direction = direction

        # define objetivo
        if goal is None:
          if self.direction == (0, 1) or self.direction == (0, -1):
              self.beliefs['goal'] = self.pos[0], self.model.grid.height - self.pos[1]
          else:
              self.beliefs['goal'] = self.model.grid.width - self.pos[0], self.pos[1]
        else:
          self.beliefs['goal'] = goal

        # define semáforo
        agents = self.model.schedule.agents
        for agent in agents:
          if agent.unique_id == 0 and self.direction == (0, 1): # Norte
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
            break
          elif agent.unique_id == 1 and self.direction == (0, -1): # Sur
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
            break
          elif agent.unique_id == 2 and self.direction == (1, 0): # Este
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
            break
          elif agent.unique_id == 3 and self.direction == (-1, 0): # Oeste
            self.beliefs['obeyingAmpel'] = agent
            self.beliefs['ampelColor'] = agent.state
            break

    def updateAction(self):
      # Evalúa 2 condiciones
        ampel = True
        obst = True
      # Si el semáforo está en verde
        if ((self.direction == (0, 1) and (25 <= self.pos[1] < 30)) or
        (self.direction == (0, -1) and (75 <= self.pos[1] < 80)) or
        (self.direction == (1, 0) and (25 <= self.pos[0] < 30)) or
        (self.direction == (-1, 0) and (75 <= self.pos[0] < 80))):
          # Si está en rango para obedecer
          # cambia estado acorde al semáforo
          if self.beliefs['ampelColor'] == 'Green':
            # Si hay un carro o peatón en el camino a la nueva posición, obst se vuelve falso
            newPos = (self.direction[0]*self.beliefs['speed'] + self.pos[0]), (self.direction[1]*self.beliefs['speed'] + self.pos[1])

            for agent in self.model.schedule.agents:
              if agent != self:  # Skip self
                if (((self.pos[0] <= agent.pos[0] <= newPos[0]) or (newPos[0] <= agent.pos[0] <= self.pos[0])) and
                 ((self.pos[1] <= agent.pos[1] <= newPos[1]) or (newPos[1] <= agent.pos[1] <= self.pos[1]))):
                    obst = False
          else:
            ampel = False

        if ampel and obst:
          self.beliefs['action'] = 'driving'
        else:
          self.beliefs['action'] = 'waiting'


    def move(self):
        if self.beliefs['action'] == 'driving':
          newPos = (self.direction[0]*self.beliefs['speed'] + self.pos[0]), (self.direction[1]*self.beliefs['speed'] + self.pos[1])

          if self.model.grid.out_of_bounds(newPos)or self.pos == self.beliefs['goal']:
              self.model.grid.remove_agent(self)
              self.model.schedule.remove(self)
              #print("Llegó al objetivo, destruyendo")
          else:
              self.model.grid.move_agent(self, newPos)
              #print(f"CarroID: {str(self.unique_id)} Estado: {str(self.beliefs['action'])} Pos: {str(self.pos)}")
        #else:
          #print(f"CarroID: {str(self.unique_id)} Estado: {str(self.beliefs['action'])} Pos: {str(self.pos)}")

    def walk(self):
        # Evalúa posición
        ## Si posición lo amerita, evaluar semáforo
        if (self.pos[0] < 35 or self.pos[0] > 85) and (self.pos[1] < 35 or self.pos[1] > 85):
          # Actualiza semáforo
          agents = self.model.schedule.agents
          for agent in agents:
            if agent == self.beliefs['obeyingAmpel']:
              self.beliefs['ampelColor'] = agent.state
              break
        self.updateAction()
        self.move()

    def step(self):
        self.walk()

class AmpelAgent(mesa.Agent):
    SOME_THRESHOLD = 10

    def __init__(self, unique_id, model, x, y, state):
        # Pasa los parámetros a la clase padre
        super().__init__(unique_id, model)
        self.state = state
        self.NumStatesGr = 12 # Verde #0
        self.NumStatesYe = 6 # Amarillo #1
        self.NumStatesRe = 54 # Rojo #2
        self.pos = x, y

    def changeState(self):
          if(self.state == 'Green'):
            self.NumStatesGr -= 1
            if self.NumStatesGr == 0:
              self.state = 'Yellow'
              self.NumStatesGr = 12
          elif(self.state == 'Yellow'):
            self.NumStatesYe -= 1
            if self.NumStatesYe == 0:
              self.state = 'Red'
              self.NumStatesYe = 6
          elif(self.state == 'Red'):
            self.NumStatesRe -= 1
            if self.NumStatesRe == 0:
              self.state = 'Green'
              self.NumStatesRe = 54


    def detect_traffic(self):
        x, y = self.pos
        traffic_count = 0


        for i in range(1, 11):
            if isinstance(self.model.grid.get_cell_list_contents([(x, y-i)]), CarAgent):
                traffic_count += 1

        for i in range(1, 11):
            if isinstance(self.model.grid.get_cell_list_contents([(x, y+i)]), CarAgent):
                traffic_count += 1

        for i in range(1, 11):
            if isinstance(self.model.grid.get_cell_list_contents([(x+i, y)]), CarAgent):
                traffic_count += 1

        for i in range(1, 11):
            if isinstance(self.model.grid.get_cell_list_contents([(x-i, y)]), CarAgent):
                traffic_count += 1

        return traffic_count


    def negotiate(self):
        for agent in self.model.schedule.agents:
            if isinstance(agent, AmpelAgent) and agent != self:
                my_traffic = self.detect_traffic()
                their_traffic = agent.detect_traffic()
                if my_traffic > their_traffic:
                    self.state = 'Green'
                    agent.state = 'Red'

    def step(self):
        #print(f"Semaforo #{str(self.unique_id)}. Color: {str(self.state)}")
        if self.detect_traffic() > self.SOME_THRESHOLD:
              self.negotiate()
        self.changeState()

"""## Entorno"""

class PriorityActivation(RandomActivation):
    def step(self):
        """
        Primero activa a los AmpelAgent y luego a los demás agentes, ambos en un orden aleatorio.
        """
        # Lista para AmpelAgent
        ampel_agents = [agent for agent in self.agents if isinstance(agent, AmpelAgent)]
        random.shuffle(ampel_agents)  # Mezclar la lista aleatoriamente
        for agent in ampel_agents:
            agent.step()

        # Lista para otros agentes
        other_agents = [agent for agent in self.agents if not isinstance(agent, AmpelAgent)]
        random.shuffle(other_agents)  # Mezclar la lista aleatoriamente
        for agent in other_agents:
            agent.step()

class Model(mesa.Model):

    def __init__(self):
        self.grid = mesa.space.MultiGrid(130, 130, False)
        self.schedule = PriorityActivation(self)
        self.data = []

        '''
        Se usa un json para actualizar informacion de los agentes una vez que ya se corrió el código
        Los agentes (carro y peaton) guardados guardan la siguiente información:
          id, pos, dirección, objetivo
        Los agentes semáforo guardan la siguiente información:
          id, estado
        '''

        if os.path.exists("agentData.json"):
            # If it exists, read the data from the file
            with open("agentData.json", "r") as file:
                self.data = json.load(file)

            # Delete the file to clear its contents
            os.remove("agentData.json")

            # Recreate the empty file
            open("agentData.json", "w").close()

            for agent_info in self.data:
              agent_id = agent_info["id"]

              if agent_id < 4:  # Ampel agents
                state = agent_info["state"]
                a = AmpelAgent(agent_id, self, 60, 60, state)
                self.grid.place_agent(a, (60, 60))
                self.schedule.add(a)
              else:
                x = agent_info["x"]
                y = agent_info["y"]
                direction = agent_info["direction"]
                goal = agent_info["goal"]
                if agent_id <= 20:  # Car agents
                  c = CarAgent(agent_id, self, x, y, direction, goal)
                  self.grid.place_agent(c, (x, y))
                  self.schedule.add(c)
                else:  # Person agents
                  p = PersonAgent(agent_id, self, x, y, direction, goal)
                  self.grid.place_agent(p, (x, y))
                  self.schedule.add(p)
        else:
            # If it doesn't exist, create an empty data array
            a = AmpelAgent(0, self, 60, 60, 'Green')
            self.grid.place_agent(a, (60, 60))
            self.schedule.add(a)

            a = AmpelAgent(1, self, 60, 60, 'Red')
            self.grid.place_agent(a, (60, 60))
            self.schedule.add(a)

            a = AmpelAgent(2, self, 60, 60, 'Red')
            self.grid.place_agent(a, (60, 60))
            self.schedule.add(a)

            a = AmpelAgent(3, self, 60, 60, 'Red')
            self.grid.place_agent(a, (60, 60))
            self.schedule.add(a)

            c = PersonAgent(24, self, 83, 0)
            self.grid.place_agent(c, (83, 0))
            self.schedule.add(c)

            c = PersonAgent(25, self, 0, 78)
            self.grid.place_agent(c, (0, 78))
            self.schedule.add(c)

            c = CarAgent(6, self, 70, 0)
            self.grid.place_agent(c, (70, 0))
            self.schedule.add(c)
            self.data = []

    def add_agent(self, id, x, y, direction, goal):
          agent = {
              "id": id,
              "x": x,
              "y": y,
              "direction": direction,
              "goal": goal
          }
          self.data.append(agent)

    def add_ampel(self, id, state):
        ampel = {
            "id": id,
            "state": state
        }
        self.data.append(ampel)

    def step(self):
        self.schedule.step()
        self.data = []

        ids = []
        x_positions = []
        y_positions = []
        idAmpel = []
        states = []
        for agent in self.schedule.agents:
            if agent.unique_id < 4:
                idAmpel.append(agent.unique_id)
                states.append(agent.state)
                self.add_ampel(agent.unique_id, agent.state)
            else:
                ids.append(agent.unique_id)
                x_positions.append(agent.pos[0])
                y_positions.append(agent.pos[1])
                self.add_agent(agent.unique_id,
                          agent.pos[0],
                          agent.pos[1],
                          agent.direction,
                          agent.beliefs['goal'])

        # Save the updated data back to the file
        with open("agentData.json", "w") as file:
            json.dump(self.data, file, indent=4)

        return ids, x_positions, y_positions, idAmpel, states

"""## Generación de modelo"""

def execute():
  tileWorld1 = Model()
  return tileWorld1.step()

all_agent_positions = []
for i in range(10):
  ids, posicionX, posicionY, idAmpel, states = execute()
  agent_positions = []
  for agent_id, x, y in zip(ids, posicionX, posicionY):
      agent_info = {
          "agent_id": agent_id,
          "x": x,
          "y": y
      }
      agent_positions.append(agent_info)

  all_agent_positions.append(agent_positions)

with open("agent_positions.json", "w") as json_file:
    json.dump(all_agent_positions, json_file, indent=4)